#使用的用户和组
user  root;

#指定工作衍生进程数（一般等于CPU的总核数）
worker_processes  1;

#指定错误日志存放的路径，错误日志记录级别可选项为[ debug | info | notice | warn | error | crit ]
error_log  /var/log/nginx/error.log warn;

#指定pid存放的路径，该文件是一个纯文本文件，里面记录的是进程的pid号
pid        /var/run/nginx.pid;

#指定文件描述符数量
#worker_rlimit_nofile 51200

events {

	#使用的网络I/O模型，Linux系统推荐采用epoll模型，FreeBSD系统推荐采用kqueue模型
	#use epoll;
	
	#允许的连接数（单进程）
    worker_connections  1024;
}


http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;
	
	#设置使用的字符集，如果一个网站有许多字符集，请不要随便设置，应让程序员在HTML代码中通过Meta标签设置
	#charset gb2312;
	
	#设置客户端能够上传的文件大小
	#client_max_body_size 8m;

	#设置日志的记录格式，main是定义的格式名称，后面每段字符串表示定义的格式样式
	#$remote_addr和$http_x_forwarded_for用于记录IP地址；$remote_user用于记录远程客户端用户名称；
	#$time_local用于记录访问时间与时区；$request用于记录请求URL与HTTP协议；$status用于记录请求状态；
	#$body_bytes_sent用于记录发送给客户端的文件主体内容大小；$http_referer用于记录是从哪个页面链接访问过来的；
	#$http_user_agent用于记录客户端浏览器的相关信息
    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    #访问日志文件存放路径 这里的main对应上面的log_format的名称
    access_log  /var/log/nginx/access.log  main;
	
	#主要用来设置含有变量的日志路径的文件描述符缓存,max:设置缓存中的最大文件描述符数量。如果
	#超过设置的最大文件描述符数量，则采用LRU算法清楚“较不常使用的文件描述符”。LRU（Least Recently Used）
	#算法的基本概念是：当内存缓存区剩余的可用空间不够时，缓冲区尽可能地先保留使用者最常使用的数据，将最近
	#未使用的数据移除内存，腾出空间来加载另外的数据。
	#inactive：设置一个时间，如果在设置的时间内没有使用此文件描述符，则自动删除此描述符。此参数可选，默认10s。
	#min_uses：在参数inactive指定的时间范围内，如果日志文件超过被使用的次数，则将该文件的描述符计入缓存。默认为1。
	#valid：设置多长时间检查一次，看一看变量指定的日志文件路径与文件名是否仍然存在。默认1m。
	#open_log_file_cache max=1000 inactive=20s min_uses=2 valid=1m;

    sendfile        on;
    #tcp_nopush     on;

    keepalive_timeout  65;

	#开启gzip压缩
    #gzip  on;

    include /etc/nginx/conf.d/*.conf;
}
